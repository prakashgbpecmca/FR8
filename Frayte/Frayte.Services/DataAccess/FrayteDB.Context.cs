//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Frayte.Services.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FrayteEntities : DbContext
    {
        public FrayteEntities()
            : base("name=FrayteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AddressType> AddressTypes { get; set; }
        public DbSet<CustomerTradeLane> CustomerTradeLanes { get; set; }
        public DbSet<DocumentType> DocumentTypes { get; set; }
        public DbSet<PackagingType> PackagingTypes { get; set; }
        public DbSet<ReceiverShipper> ReceiverShippers { get; set; }
        public DbSet<ShipmentAgentRejection> ShipmentAgentRejections { get; set; }
        public DbSet<ShipmentProgress> ShipmentProgresses { get; set; }
        public DbSet<ShipmentTerm> ShipmentTerms { get; set; }
        public DbSet<SpecialDelivery> SpecialDeliveries { get; set; }
        public DbSet<Timezone> Timezones { get; set; }
        public DbSet<TransportToWarehouse> TransportToWarehouses { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<Carrier> Carriers { get; set; }
        public DbSet<CountryPublicHoliday> CountryPublicHolidays { get; set; }
        public DbSet<CountryDocument> CountryDocuments { get; set; }
        public DbSet<AgentAssociatedUser> AgentAssociatedUsers { get; set; }
        public DbSet<Tradelane> Tradelanes { get; set; }
        public DbSet<WorkingWeekDayDetail> WorkingWeekDayDetails { get; set; }
        public DbSet<Warehouse> Warehouses { get; set; }
        public DbSet<UserAddress> UserAddresses { get; set; }
        public DbSet<ShipmentType> ShipmentTypes { get; set; }
        public DbSet<CurrencyType> CurrencyTypes { get; set; }
        public DbSet<ConsignmentBag> ConsignmentBags { get; set; }
        public DbSet<TracingComment> TracingComments { get; set; }
        public DbSet<ShipmentTracing> ShipmentTracings { get; set; }
        public DbSet<ReportSetting> ReportSettings { get; set; }
        public DbSet<ReportSettingEmailDetail> ReportSettingEmailDetails { get; set; }
        public DbSet<WorkingWeekDay> WorkingWeekDays { get; set; }
        public DbSet<CountryShipmentPort> CountryShipmentPorts { get; set; }
        public DbSet<Shipment> Shipments { get; set; }
        public DbSet<UserShipmentType> UserShipmentTypes { get; set; }
        public DbSet<ShipmentEasyPostRate> ShipmentEasyPostRates { get; set; }
        public DbSet<ShipmentEmailService> ShipmentEmailServices { get; set; }
        public DbSet<ShipmentDetail> ShipmentDetails { get; set; }
        public DbSet<ShipmentEasyPost> ShipmentEasyPosts { get; set; }
        public DbSet<ShipmentCustomDetail> ShipmentCustomDetails { get; set; }
        public DbSet<APIKeyDetail> APIKeyDetails { get; set; }
        public DbSet<CustomerSettingDetail> CustomerSettingDetails { get; set; }
        public DbSet<OperationZoneExchangeRate> OperationZoneExchangeRates { get; set; }
        public DbSet<OperationZoneExchangeRateHistory> OperationZoneExchangeRateHistories { get; set; }
        public DbSet<Courier> Couriers { get; set; }
        public DbSet<LogisticServiceThirdPartyMatrix> LogisticServiceThirdPartyMatrices { get; set; }
        public DbSet<CustomerMarginOption> CustomerMarginOptions { get; set; }
        public DbSet<LogisticServiceCourierAccount> LogisticServiceCourierAccounts { get; set; }
        public DbSet<OperationZone> OperationZones { get; set; }
        public DbSet<CountryUK> CountryUKs { get; set; }
        public DbSet<ShipmentStatu> ShipmentStatus { get; set; }
        public DbSet<LogisticZoneCountryPostCode> LogisticZoneCountryPostCodes { get; set; }
        public DbSet<eCommerceShipmentAddress> eCommerceShipmentAddresses { get; set; }
        public DbSet<ShipmentCustomDetailDraft> ShipmentCustomDetailDrafts { get; set; }
        public DbSet<eCommerceShipmentCustomDetail> eCommerceShipmentCustomDetails { get; set; }
        public DbSet<eCommerceShipmentEasyPost> eCommerceShipmentEasyPosts { get; set; }
        public DbSet<LogisticServiceBaseRateCardHistory> LogisticServiceBaseRateCardHistories { get; set; }
        public DbSet<ShipmentBag> ShipmentBags { get; set; }
        public DbSet<ShipmentBagDetail> ShipmentBagDetails { get; set; }
        public DbSet<CountrySM> CountrySMS { get; set; }
        public DbSet<NotificationSM> NotificationSMS { get; set; }
        public DbSet<RoleModule> RoleModules { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<CustomerAdvanceMarginCost> CustomerAdvanceMarginCosts { get; set; }
        public DbSet<DirectShipmentDetail> DirectShipmentDetails { get; set; }
        public DbSet<DirectShipmentDetailDraft> DirectShipmentDetailDrafts { get; set; }
        public DbSet<Bank> Banks { get; set; }
        public DbSet<HSCode> HSCodes { get; set; }
        public DbSet<eCommerceCustomManifest> eCommerceCustomManifests { get; set; }
        public DbSet<eCommerceShipmentDetail> eCommerceShipmentDetails { get; set; }
        public DbSet<LogisticServiceZonePostCode> LogisticServiceZonePostCodes { get; set; }
        public DbSet<CountryLogistic> CountryLogistics { get; set; }
        public DbSet<CustomerLogistic> CustomerLogistics { get; set; }
        public DbSet<LogisticServiceAddOn> LogisticServiceAddOns { get; set; }
        public DbSet<eCommerceBag> eCommerceBags { get; set; }
        public DbSet<eCommerceBagManifest> eCommerceBagManifests { get; set; }
        public DbSet<QuotationShipmentDetail> QuotationShipmentDetails { get; set; }
        public DbSet<eCommerceUploadShipmentBatchProcess> eCommerceUploadShipmentBatchProcesses { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<LogisticServiceBaseRateCard> LogisticServiceBaseRateCards { get; set; }
        public DbSet<PackageTrackingDetail> PackageTrackingDetails { get; set; }
        public DbSet<eCommercePackageTrackingDetail> eCommercePackageTrackingDetails { get; set; }
        public DbSet<LogisticServiceWeight> LogisticServiceWeights { get; set; }
        public DbSet<ModuleLevelDetail> ModuleLevelDetails { get; set; }
        public DbSet<LogisticServiceZoneCountry> LogisticServiceZoneCountries { get; set; }
        public DbSet<UserLogin> UserLogins { get; set; }
        public DbSet<UserClaim> UserClaims { get; set; }
        public DbSet<CountryState> CountryStates { get; set; }
        public DbSet<CustomerSetting> CustomerSettings { get; set; }
        public DbSet<SystemAlert> SystemAlerts { get; set; }
        public DbSet<Vw_GetUnmanifestedShipmentsCount> Vw_GetUnmanifestedShipmentsCount { get; set; }
        public DbSet<Vw_GetUnMapperHscodeCount> Vw_GetUnMapperHscodeCount { get; set; }
        public DbSet<eCommerceCommunication> eCommerceCommunications { get; set; }
        public DbSet<eCommerceEmailCommuniation> eCommerceEmailCommuniations { get; set; }
        public DbSet<eCommerceInvoiceTransaction> eCommerceInvoiceTransactions { get; set; }
        public DbSet<eCommerceTracking> eCommerceTrackings { get; set; }
        public DbSet<eCommerceUserCreditNote> eCommerceUserCreditNotes { get; set; }
        public DbSet<AdminCharge> AdminCharges { get; set; }
        public DbSet<LogisticServiceZone> LogisticServiceZones { get; set; }
        public DbSet<eCommerceShipment> eCommerceShipments { get; set; }
        public DbSet<eCommerceInvoice> eCommerceInvoices { get; set; }
        public DbSet<CustomerMarginCost> CustomerMarginCosts { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<FuelSurCharge> FuelSurCharges { get; set; }
        public DbSet<ModuleLevel> ModuleLevels { get; set; }
        public DbSet<LogisticServiceDetail> LogisticServiceDetails { get; set; }
        public DbSet<DirectBulkUploadSession> DirectBulkUploadSessions { get; set; }
        public DbSet<TrackingMileStone> TrackingMileStones { get; set; }
        public DbSet<TradelaneUserTrackingConfiguration> TradelaneUserTrackingConfigurations { get; set; }
        public DbSet<TradelaneUserTrackingConfigurationDetail> TradelaneUserTrackingConfigurationDetails { get; set; }
        public DbSet<Airport> Airports { get; set; }
        public DbSet<TradelaneShipperCustomer> TradelaneShipperCustomers { get; set; }
        public DbSet<Airline> Airlines { get; set; }
        public DbSet<TradelaneShipmentAllocation> TradelaneShipmentAllocations { get; set; }
        public DbSet<TradelaneLogging> TradelaneLoggings { get; set; }
        public DbSet<TradelaneShipmentDocument> TradelaneShipmentDocuments { get; set; }
        public DbSet<UserCustomer> UserCustomers { get; set; }
        public DbSet<ApiErrorCode> ApiErrorCodes { get; set; }
        public DbSet<UserTrackingConfiguration> UserTrackingConfigurations { get; set; }
        public DbSet<DirectShipmentAddress> DirectShipmentAddresses { get; set; }
        public DbSet<DirectShipmentAddressDraft> DirectShipmentAddressDrafts { get; set; }
        public DbSet<LogisticOptionalService> LogisticOptionalServices { get; set; }
        public DbSet<DirectShipmentOptionalService> DirectShipmentOptionalServices { get; set; }
        public DbSet<QuotationShipmentOptionalService> QuotationShipmentOptionalServices { get; set; }
        public DbSet<Manifest> Manifests { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<LogisticIntegration> LogisticIntegrations { get; set; }
        public DbSet<TermAndCondition> TermAndConditions { get; set; }
        public DbSet<DirectShipmentTracking> DirectShipmentTrackings { get; set; }
        public DbSet<TradelaneShipmentHawb> TradelaneShipmentHawbs { get; set; }
        public DbSet<TradelaneShipmentTracking> TradelaneShipmentTrackings { get; set; }
        public DbSet<TradelaneFlightDetail> TradelaneFlightDetails { get; set; }
        public DbSet<DirectShipmentDraft> DirectShipmentDrafts { get; set; }
        public DbSet<LogisticService> LogisticServices { get; set; }
        public DbSet<UserCountryAddress> UserCountryAddresses { get; set; }
        public DbSet<CustomerStaff> CustomerStaffs { get; set; }
        public DbSet<ExpressAddress> ExpressAddresses { get; set; }
        public DbSet<ExpressManifest> ExpressManifests { get; set; }
        public DbSet<ExpressScanAWB> ExpressScanAWBs { get; set; }
        public DbSet<HubAirline> HubAirlines { get; set; }
        public DbSet<HubUser> HubUsers { get; set; }
        public DbSet<UserProductCatalogDetail> UserProductCatalogDetails { get; set; }
        public DbSet<ExpressAWB> ExpressAWBs { get; set; }
        public DbSet<HubAirlineAddress> HubAirlineAddresses { get; set; }
        public DbSet<UserProductCatalog> UserProductCatalogs { get; set; }
        public DbSet<ExpressDetailPackageLabel> ExpressDetailPackageLabels { get; set; }
        public DbSet<ExpressCustomDetail> ExpressCustomDetails { get; set; }
        public DbSet<CustomerHubCarrierService> CustomerHubCarrierServices { get; set; }
        public DbSet<HubCarrierServiceCountry> HubCarrierServiceCountries { get; set; }
        public DbSet<HubCarrierServiceCountryState> HubCarrierServiceCountryStates { get; set; }
        public DbSet<MasterTrackingConfiguration> MasterTrackingConfigurations { get; set; }
        public DbSet<MasterTrackingDetail> MasterTrackingDetails { get; set; }
        public DbSet<MasterTracking> MasterTrackings { get; set; }
        public DbSet<MobileUserConfiguration> MobileUserConfigurations { get; set; }
        public DbSet<ShipmentHandlerMethod> ShipmentHandlerMethods { get; set; }
        public DbSet<HubCarrier> HubCarriers { get; set; }
        public DbSet<LogisticServiceShipmentType> LogisticServiceShipmentTypes { get; set; }
        public DbSet<TrackingNumberRoute> TrackingNumberRoutes { get; set; }
        public DbSet<BagManifestTracking> BagManifestTrackings { get; set; }
        public DbSet<ExpressSchedulerEmail> ExpressSchedulerEmails { get; set; }
        public DbSet<LogisticServiceWeightLimit> LogisticServiceWeightLimits { get; set; }
        public DbSet<ExpressBag> ExpressBags { get; set; }
        public DbSet<HubCarrierService> HubCarrierServices { get; set; }
        public DbSet<QuotationShipment> QuotationShipments { get; set; }
        public DbSet<ExpressDriverManifest> ExpressDriverManifests { get; set; }
        public DbSet<DirectShipment> DirectShipments { get; set; }
        public DbSet<CartonSpecification> CartonSpecifications { get; set; }
        public DbSet<CustomerCustomField> CustomerCustomFields { get; set; }
        public DbSet<Incoterm> Incoterms { get; set; }
        public DbSet<UserAdditional> UserAdditionals { get; set; }
        public DbSet<BBkShipmentAddress> BBkShipmentAddresses { get; set; }
        public DbSet<CustomerCompanyDetail> CustomerCompanyDetails { get; set; }
        public DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public DbSet<AddressBook> AddressBooks { get; set; }
        public DbSet<ProductCatalogDetailCAN> ProductCatalogDetailCANs { get; set; }
        public DbSet<ProductCatalogDetailSWISS> ProductCatalogDetailSWISSes { get; set; }
        public DbSet<ProductCatalogDetailEAM> ProductCatalogDetailEAMs { get; set; }
        public DbSet<ProductCatalog> ProductCatalogs { get; set; }
        public DbSet<ProductCatalogDetailJapan> ProductCatalogDetailJapans { get; set; }
        public DbSet<ProductCatalogDetailUSA> ProductCatalogDetailUSAs { get; set; }
        public DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public DbSet<ExpressDetail> ExpressDetails { get; set; }
        public DbSet<ProductCatalogDetailNorway> ProductCatalogDetailNorways { get; set; }
        public DbSet<ProductCatalogDetailSingapore> ProductCatalogDetailSingapores { get; set; }
        public DbSet<ProductCatalogDetailUK> ProductCatalogDetailUKs { get; set; }
        public DbSet<Hub> Hubs { get; set; }
        public DbSet<BBKShipment> BBKShipments { get; set; }
        public DbSet<BBKShipmentDetail> BBKShipmentDetails { get; set; }
        public DbSet<TradelaneShipment> TradelaneShipments { get; set; }
        public DbSet<MAWBCustomized> MAWBCustomizeds { get; set; }
        public DbSet<TradelaneShipmentAddress> TradelaneShipmentAddresses { get; set; }
        public DbSet<TradelaneShipmentDetail> TradelaneShipmentDetails { get; set; }
        public DbSet<HubCarrierServiceCountryPostCode> HubCarrierServiceCountryPostCodes { get; set; }
        public DbSet<TrackingDetail> TrackingDetails { get; set; }
        public DbSet<Express> Expresses { get; set; }
    
        public virtual ObjectResult<spGet_ShipmentDetailE62_Result> spGet_ShipmentDetailE62(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE62_Result>("spGet_ShipmentDetailE62", shipmentIdParameter);
        }
    
        public virtual int spSet_ShipmentTradeLane(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSet_ShipmentTradeLane", shipmentIdParameter);
        }
    
        public virtual int spSet_ShipmentEmailService(Nullable<System.Guid> shipmentEmailServiceId, Nullable<System.DateTime> emailSentDate, Nullable<System.TimeSpan> emailSentTime, Nullable<int> emailSentCount)
        {
            var shipmentEmailServiceIdParameter = shipmentEmailServiceId.HasValue ?
                new ObjectParameter("ShipmentEmailServiceId", shipmentEmailServiceId) :
                new ObjectParameter("ShipmentEmailServiceId", typeof(System.Guid));
    
            var emailSentDateParameter = emailSentDate.HasValue ?
                new ObjectParameter("EmailSentDate", emailSentDate) :
                new ObjectParameter("EmailSentDate", typeof(System.DateTime));
    
            var emailSentTimeParameter = emailSentTime.HasValue ?
                new ObjectParameter("EmailSentTime", emailSentTime) :
                new ObjectParameter("EmailSentTime", typeof(System.TimeSpan));
    
            var emailSentCountParameter = emailSentCount.HasValue ?
                new ObjectParameter("EmailSentCount", emailSentCount) :
                new ObjectParameter("EmailSentCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSet_ShipmentEmailService", shipmentEmailServiceIdParameter, emailSentDateParameter, emailSentTimeParameter, emailSentCountParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentEmailServices_Result> spGet_ShipmentEmailServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentEmailServices_Result>("spGet_ShipmentEmailServices");
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE6_Result> spGet_ShipmentDetailE6(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE6_Result>("spGet_ShipmentDetailE6", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentShipperReceiverDetail_Result> spGet_ShipmentShipperReceiverDetail(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentShipperReceiverDetail_Result>("spGet_ShipmentShipperReceiverDetail", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentTracingDetail_Result> spGet_ShipmentTracingDetail(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentTracingDetail_Result>("spGet_ShipmentTracingDetail", barcodeParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE131_Result> spGet_ShipmentDetailE131(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE131_Result>("spGet_ShipmentDetailE131", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE15_Result> spGet_ShipmentDetailE15(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE15_Result>("spGet_ShipmentDetailE15", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE16_Result> spGet_ShipmentDetailE16(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE16_Result>("spGet_ShipmentDetailE16", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE7_Result> spGet_ShipmentDetailE7(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE7_Result>("spGet_ShipmentDetailE7", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE71_Result> spGet_ShipmentDetailE71(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE71_Result>("spGet_ShipmentDetailE71", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE8_Result> spGet_ShipmentDetailE8(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE8_Result>("spGet_ShipmentDetailE8", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE81_Result> spGet_ShipmentDetailE81(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE81_Result>("spGet_ShipmentDetailE81", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE9_Result> spGet_ShipmentDetailE9(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE9_Result>("spGet_ShipmentDetailE9", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE91_Result> spGet_ShipmentDetailE91(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE91_Result>("spGet_ShipmentDetailE91", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE11_Result> spGet_ShipmentDetailE11(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE11_Result>("spGet_ShipmentDetailE11", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE12_Result> spGet_ShipmentDetailE12(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE12_Result>("spGet_ShipmentDetailE12", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE13_Result> spGet_ShipmentDetailE13(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE13_Result>("spGet_ShipmentDetailE13", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE14_Result> spGet_ShipmentDetailE14(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE14_Result>("spGet_ShipmentDetailE14", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE61_Result> spGet_ShipmentDetailE61(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE61_Result>("spGet_ShipmentDetailE61", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE10_Result> spGet_ShipmentDetailE10(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE10_Result>("spGet_ShipmentDetailE10", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE64_Result> spGet_ShipmentDetailE64(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE64_Result>("spGet_ShipmentDetailE64", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE101_Result> spGet_ShipmentDetailE101(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE101_Result>("spGet_ShipmentDetailE101", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE67_Result> spGet_ShipmentDetailE67(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE67_Result>("spGet_ShipmentDetailE67", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE1_Result> spGet_ShipmentDetailE1(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE1_Result>("spGet_ShipmentDetailE1", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE2_Result> spGet_ShipmentDetailE2(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE2_Result>("spGet_ShipmentDetailE2", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE31_Result> spGet_ShipmentDetailE31(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE31_Result>("spGet_ShipmentDetailE31", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE4_Result> spGet_ShipmentDetailE4(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE4_Result>("spGet_ShipmentDetailE4", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE5_Result> spGet_ShipmentDetailE5(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE5_Result>("spGet_ShipmentDetailE5", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE51_Result> spGet_ShipmentDetailE51(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE51_Result>("spGet_ShipmentDetailE51", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE65_Result> spGet_ShipmentDetailE65(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE65_Result>("spGet_ShipmentDetailE65", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentDetailE3_Result> spGet_ShipmentDetailE3(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentDetailE3_Result>("spGet_ShipmentDetailE3", shipmentIdParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentReportDetail_Result> spGet_ShipmentReportDetail(Nullable<int> shipmentId)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("ShipmentId", shipmentId) :
                new ObjectParameter("ShipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentReportDetail_Result>("spGet_ShipmentReportDetail", shipmentIdParameter);
        }
    
        public virtual int spDelete_ShipmentEmailServices(Nullable<System.Guid> shipmentEmailServiceId)
        {
            var shipmentEmailServiceIdParameter = shipmentEmailServiceId.HasValue ?
                new ObjectParameter("ShipmentEmailServiceId", shipmentEmailServiceId) :
                new ObjectParameter("ShipmentEmailServiceId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelete_ShipmentEmailServices", shipmentEmailServiceIdParameter);
        }
    
        public virtual ObjectResult<spGet_NewShipmentReportDetail_Result> spGet_NewShipmentReportDetail(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_NewShipmentReportDetail_Result>("spGet_NewShipmentReportDetail", userIdParameter);
        }
    
        public virtual ObjectResult<spGet_GetSystemAlerts_Result> spGet_GetSystemAlerts(Nullable<int> operationZoneId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows)
        {
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_GetSystemAlerts_Result>("spGet_GetSystemAlerts", operationZoneIdParameter, fromDateParameter, toDateParameter, skipRowsParameter, takeRowsParameter);
        }
    
        public virtual ObjectResult<spGet_GetManifestedShipments_Result> spGet_GetManifestedShipments(Nullable<int> manifestId, string moduleType)
        {
            var manifestIdParameter = manifestId.HasValue ?
                new ObjectParameter("ManifestId", manifestId) :
                new ObjectParameter("ManifestId", typeof(int));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_GetManifestedShipments_Result>("spGet_GetManifestedShipments", manifestIdParameter, moduleTypeParameter);
        }
    
        public virtual ObjectResult<spGet_ManifestDetail_Result> spGet_ManifestDetail(Nullable<int> manifestId, string moduleType)
        {
            var manifestIdParameter = manifestId.HasValue ?
                new ObjectParameter("ManifestId", manifestId) :
                new ObjectParameter("ManifestId", typeof(int));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ManifestDetail_Result>("spGet_ManifestDetail", manifestIdParameter, moduleTypeParameter);
        }
    
        public virtual ObjectResult<spGet_TrackNonHSCodeShipments_Result> spGet_TrackNonHSCodeShipments(string moduleType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shipmentStatusId, string frayteNo, string trackingNo, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> operationZoneId)
        {
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var frayteNoParameter = frayteNo != null ?
                new ObjectParameter("FrayteNo", frayteNo) :
                new ObjectParameter("FrayteNo", typeof(string));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_TrackNonHSCodeShipments_Result>("spGet_TrackNonHSCodeShipments", moduleTypeParameter, fromDateParameter, toDateParameter, shipmentStatusIdParameter, frayteNoParameter, trackingNoParameter, skipRowsParameter, takeRowsParameter, operationZoneIdParameter);
        }
    
        public virtual ObjectResult<spGet_TrackUserDetail_Result> spGet_TrackUserDetail(Nullable<int> roleId, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> operationZoneId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_TrackUserDetail_Result>("spGet_TrackUserDetail", roleIdParameter, skipRowsParameter, takeRowsParameter, operationZoneIdParameter);
        }
    
        public virtual ObjectResult<spGet_PostCodeAddress_Result> spGet_PostCodeAddress(string postCode)
        {
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_PostCodeAddress_Result>("spGet_PostCodeAddress", postCodeParameter);
        }
    
        public virtual ObjectResult<Get_ZoneWiseCountry_Result> Get_ZoneWiseCountry(Nullable<int> logisticServiceId)
        {
            var logisticServiceIdParameter = logisticServiceId.HasValue ?
                new ObjectParameter("LogisticServiceId", logisticServiceId) :
                new ObjectParameter("LogisticServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ZoneWiseCountry_Result>("Get_ZoneWiseCountry", logisticServiceIdParameter);
        }
    
        public virtual ObjectResult<spGet_CustomerBaseRateCard_Result> spGet_CustomerBaseRateCard(Nullable<int> logisticServiceId, Nullable<int> operationZoneId, Nullable<int> customerId)
        {
            var logisticServiceIdParameter = logisticServiceId.HasValue ?
                new ObjectParameter("LogisticServiceId", logisticServiceId) :
                new ObjectParameter("LogisticServiceId", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_CustomerBaseRateCard_Result>("spGet_CustomerBaseRateCard", logisticServiceIdParameter, operationZoneIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<Get_ThirdPartyMatrix_Result> Get_ThirdPartyMatrix(Nullable<int> logisticServiceId)
        {
            var logisticServiceIdParameter = logisticServiceId.HasValue ?
                new ObjectParameter("LogisticServiceId", logisticServiceId) :
                new ObjectParameter("LogisticServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ThirdPartyMatrix_Result>("Get_ThirdPartyMatrix", logisticServiceIdParameter);
        }
    
        public virtual ObjectResult<spGet_CustomManifestSearch_Result> spGet_CustomManifestSearch(string manifestName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows)
        {
            var manifestNameParameter = manifestName != null ?
                new ObjectParameter("ManifestName", manifestName) :
                new ObjectParameter("ManifestName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_CustomManifestSearch_Result>("spGet_CustomManifestSearch", manifestNameParameter, fromDateParameter, toDateParameter, skipRowsParameter, takeRowsParameter);
        }
    
        public virtual ObjectResult<spGet_TrackAssignedJob_Result> spGet_TrackAssignedJob(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> operationZoneId, Nullable<int> operatorId, Nullable<int> destinationCountry)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("OperatorId", operatorId) :
                new ObjectParameter("OperatorId", typeof(int));
    
            var destinationCountryParameter = destinationCountry.HasValue ?
                new ObjectParameter("DestinationCountry", destinationCountry) :
                new ObjectParameter("DestinationCountry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_TrackAssignedJob_Result>("spGet_TrackAssignedJob", fromDateParameter, toDateParameter, skipRowsParameter, takeRowsParameter, operationZoneIdParameter, operatorIdParameter, destinationCountryParameter);
        }
    
        public virtual ObjectResult<TrackUnAssignedJob_Result> TrackUnAssignedJob(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> operationZoneId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TrackUnAssignedJob_Result>("TrackUnAssignedJob", fromDateParameter, toDateParameter, skipRowsParameter, takeRowsParameter, operationZoneIdParameter);
        }
    
        public virtual ObjectResult<spGet_UploadShipmentDirectBookingServices_Result> spGet_UploadShipmentDirectBookingServices(Nullable<int> directShipmentDraftId, string logisticServiceCode, Nullable<decimal> weight, Nullable<int> operationZoneId, Nullable<int> fromCountryId, string fromCountryCode, Nullable<int> toCountryId, string toCountryCode, string fromPostcode, string toPostcode, string packageType, Nullable<int> userId, Nullable<System.DateTime> date, string operationZoneCountryCode, string addressType)
        {
            var directShipmentDraftIdParameter = directShipmentDraftId.HasValue ?
                new ObjectParameter("DirectShipmentDraftId", directShipmentDraftId) :
                new ObjectParameter("DirectShipmentDraftId", typeof(int));
    
            var logisticServiceCodeParameter = logisticServiceCode != null ?
                new ObjectParameter("LogisticServiceCode", logisticServiceCode) :
                new ObjectParameter("LogisticServiceCode", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var fromCountryIdParameter = fromCountryId.HasValue ?
                new ObjectParameter("FromCountryId", fromCountryId) :
                new ObjectParameter("FromCountryId", typeof(int));
    
            var fromCountryCodeParameter = fromCountryCode != null ?
                new ObjectParameter("FromCountryCode", fromCountryCode) :
                new ObjectParameter("FromCountryCode", typeof(string));
    
            var toCountryIdParameter = toCountryId.HasValue ?
                new ObjectParameter("ToCountryId", toCountryId) :
                new ObjectParameter("ToCountryId", typeof(int));
    
            var toCountryCodeParameter = toCountryCode != null ?
                new ObjectParameter("ToCountryCode", toCountryCode) :
                new ObjectParameter("ToCountryCode", typeof(string));
    
            var fromPostcodeParameter = fromPostcode != null ?
                new ObjectParameter("FromPostcode", fromPostcode) :
                new ObjectParameter("FromPostcode", typeof(string));
    
            var toPostcodeParameter = toPostcode != null ?
                new ObjectParameter("ToPostcode", toPostcode) :
                new ObjectParameter("ToPostcode", typeof(string));
    
            var packageTypeParameter = packageType != null ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var operationZoneCountryCodeParameter = operationZoneCountryCode != null ?
                new ObjectParameter("OperationZoneCountryCode", operationZoneCountryCode) :
                new ObjectParameter("OperationZoneCountryCode", typeof(string));
    
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_UploadShipmentDirectBookingServices_Result>("spGet_UploadShipmentDirectBookingServices", directShipmentDraftIdParameter, logisticServiceCodeParameter, weightParameter, operationZoneIdParameter, fromCountryIdParameter, fromCountryCodeParameter, toCountryIdParameter, toCountryCodeParameter, fromPostcodeParameter, toPostcodeParameter, packageTypeParameter, userIdParameter, dateParameter, operationZoneCountryCodeParameter, addressTypeParameter);
        }
    
        public virtual ObjectResult<spGet_ZonePostcode_Result> spGet_ZonePostcode(Nullable<int> logisticServiceZoneId, Nullable<int> logisticServiceId, string logisticCompany, Nullable<int> operationZoneId, string searchPostcode, Nullable<int> skipRows, Nullable<int> takeRows)
        {
            var logisticServiceZoneIdParameter = logisticServiceZoneId.HasValue ?
                new ObjectParameter("LogisticServiceZoneId", logisticServiceZoneId) :
                new ObjectParameter("LogisticServiceZoneId", typeof(int));
    
            var logisticServiceIdParameter = logisticServiceId.HasValue ?
                new ObjectParameter("LogisticServiceId", logisticServiceId) :
                new ObjectParameter("LogisticServiceId", typeof(int));
    
            var logisticCompanyParameter = logisticCompany != null ?
                new ObjectParameter("LogisticCompany", logisticCompany) :
                new ObjectParameter("LogisticCompany", typeof(string));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var searchPostcodeParameter = searchPostcode != null ?
                new ObjectParameter("SearchPostcode", searchPostcode) :
                new ObjectParameter("SearchPostcode", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("skipRows", skipRows) :
                new ObjectParameter("skipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("takeRows", takeRows) :
                new ObjectParameter("takeRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ZonePostcode_Result>("spGet_ZonePostcode", logisticServiceZoneIdParameter, logisticServiceIdParameter, logisticCompanyParameter, operationZoneIdParameter, searchPostcodeParameter, skipRowsParameter, takeRowsParameter);
        }
    
        public virtual ObjectResult<spGet_LogisticServiceCode_Result> spGet_LogisticServiceCode(Nullable<int> operationZoneId, Nullable<int> userId)
        {
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_LogisticServiceCode_Result>("spGet_LogisticServiceCode", operationZoneIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<TrackPackages_Result> TrackPackages(Nullable<int> shipmentId, string type, string hAWB, Nullable<int> skipRows, Nullable<int> takeRows)
        {
            var shipmentIdParameter = shipmentId.HasValue ?
                new ObjectParameter("shipmentId", shipmentId) :
                new ObjectParameter("shipmentId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var hAWBParameter = hAWB != null ?
                new ObjectParameter("HAWB", hAWB) :
                new ObjectParameter("HAWB", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TrackPackages_Result>("TrackPackages", shipmentIdParameter, typeParameter, hAWBParameter, skipRowsParameter, takeRowsParameter);
        }
    
        public virtual int MoveLiveDBTableIntoTestDBTable(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveLiveDBTableIntoTestDBTable", tableNameParameter);
        }
    
        public virtual ObjectResult<spGet_TrackDirectBookingDetail_Result> spGet_TrackDirectBookingDetail(string moduleType, string bookingApp, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shipmentStatusId, string frayteNo, string trackingNo, string logisticType, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> customerId, string logisticServiceType, Nullable<int> userId, Nullable<int> operationZoneId, Nullable<int> roleId, string callingFrom)
        {
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var bookingAppParameter = bookingApp != null ?
                new ObjectParameter("BookingApp", bookingApp) :
                new ObjectParameter("BookingApp", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var frayteNoParameter = frayteNo != null ?
                new ObjectParameter("FrayteNo", frayteNo) :
                new ObjectParameter("FrayteNo", typeof(string));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var logisticTypeParameter = logisticType != null ?
                new ObjectParameter("LogisticType", logisticType) :
                new ObjectParameter("LogisticType", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var logisticServiceTypeParameter = logisticServiceType != null ?
                new ObjectParameter("LogisticServiceType", logisticServiceType) :
                new ObjectParameter("LogisticServiceType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var callingFromParameter = callingFrom != null ?
                new ObjectParameter("CallingFrom", callingFrom) :
                new ObjectParameter("CallingFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_TrackDirectBookingDetail_Result>("spGet_TrackDirectBookingDetail", moduleTypeParameter, bookingAppParameter, fromDateParameter, toDateParameter, shipmentStatusIdParameter, frayteNoParameter, trackingNoParameter, logisticTypeParameter, skipRowsParameter, takeRowsParameter, customerIdParameter, logisticServiceTypeParameter, userIdParameter, operationZoneIdParameter, roleIdParameter, callingFromParameter);
        }
    
        public virtual ObjectResult<spGet_TrackManifest_Result> spGet_TrackManifest(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows, string moduleType, string subModuleType, Nullable<int> userId, Nullable<int> createdBy, Nullable<int> createdByRoleId, string manifestName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var subModuleTypeParameter = subModuleType != null ?
                new ObjectParameter("SubModuleType", subModuleType) :
                new ObjectParameter("SubModuleType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdByRoleIdParameter = createdByRoleId.HasValue ?
                new ObjectParameter("CreatedByRoleId", createdByRoleId) :
                new ObjectParameter("CreatedByRoleId", typeof(int));
    
            var manifestNameParameter = manifestName != null ?
                new ObjectParameter("ManifestName", manifestName) :
                new ObjectParameter("ManifestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_TrackManifest_Result>("spGet_TrackManifest", fromDateParameter, toDateParameter, skipRowsParameter, takeRowsParameter, moduleTypeParameter, subModuleTypeParameter, userIdParameter, createdByParameter, createdByRoleIdParameter, manifestNameParameter);
        }
    
        public virtual int spGet_SaveDraftAsDirectShipment(Nullable<int> directShipmentDraftId, string trackingNo, string moduleType, Nullable<int> warehouseId, Nullable<System.DateTime> updatedOn, Nullable<int> shipmentStatusId, Nullable<int> updatedBy, Nullable<System.DateTime> deliveryDate, Nullable<System.TimeSpan> deliveryTime, string signedBy, string frayteNumber, string pickUpRef, string shipmentImage)
        {
            var directShipmentDraftIdParameter = directShipmentDraftId.HasValue ?
                new ObjectParameter("DirectShipmentDraftId", directShipmentDraftId) :
                new ObjectParameter("DirectShipmentDraftId", typeof(int));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliveryTimeParameter = deliveryTime.HasValue ?
                new ObjectParameter("DeliveryTime", deliveryTime) :
                new ObjectParameter("DeliveryTime", typeof(System.TimeSpan));
    
            var signedByParameter = signedBy != null ?
                new ObjectParameter("SignedBy", signedBy) :
                new ObjectParameter("SignedBy", typeof(string));
    
            var frayteNumberParameter = frayteNumber != null ?
                new ObjectParameter("FrayteNumber", frayteNumber) :
                new ObjectParameter("FrayteNumber", typeof(string));
    
            var pickUpRefParameter = pickUpRef != null ?
                new ObjectParameter("PickUpRef", pickUpRef) :
                new ObjectParameter("PickUpRef", typeof(string));
    
            var shipmentImageParameter = shipmentImage != null ?
                new ObjectParameter("ShipmentImage", shipmentImage) :
                new ObjectParameter("ShipmentImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGet_SaveDraftAsDirectShipment", directShipmentDraftIdParameter, trackingNoParameter, moduleTypeParameter, warehouseIdParameter, updatedOnParameter, shipmentStatusIdParameter, updatedByParameter, deliveryDateParameter, deliveryTimeParameter, signedByParameter, frayteNumberParameter, pickUpRefParameter, shipmentImageParameter);
        }
    
        public virtual ObjectResult<spGet_GetNonManifestedShipments_Result> spGet_GetNonManifestedShipments(Nullable<int> operationZoneId, Nullable<int> customerId, Nullable<int> createdBy, Nullable<int> createdByRoleId, string moduleType, string subModuleType)
        {
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdByRoleIdParameter = createdByRoleId.HasValue ?
                new ObjectParameter("CreatedByRoleId", createdByRoleId) :
                new ObjectParameter("CreatedByRoleId", typeof(int));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var subModuleTypeParameter = subModuleType != null ?
                new ObjectParameter("subModuleType", subModuleType) :
                new ObjectParameter("subModuleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_GetNonManifestedShipments_Result>("spGet_GetNonManifestedShipments", operationZoneIdParameter, customerIdParameter, createdByParameter, createdByRoleIdParameter, moduleTypeParameter, subModuleTypeParameter);
        }
    
        public virtual ObjectResult<spGet_ShipmentAddress_Result> spGet_ShipmentAddress(string addressType, string searchBy, string searchValue, Nullable<int> customerId, Nullable<int> skipRows, Nullable<int> takeRows)
        {
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var searchByParameter = searchBy != null ?
                new ObjectParameter("SearchBy", searchBy) :
                new ObjectParameter("SearchBy", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ShipmentAddress_Result>("spGet_ShipmentAddress", addressTypeParameter, searchByParameter, searchValueParameter, customerIdParameter, skipRowsParameter, takeRowsParameter);
        }
    
        public virtual ObjectResult<spGet_TradelaneTrackAndTraceDetail_Result> spGet_TradelaneTrackAndTraceDetail(string mawb, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shipmentStatusId, string frayteNo, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> customerId, Nullable<int> userId, Nullable<int> operationZoneId, Nullable<int> roleId, Nullable<int> specialSerchId, string airlineId)
        {
            var mawbParameter = mawb != null ?
                new ObjectParameter("Mawb", mawb) :
                new ObjectParameter("Mawb", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var frayteNoParameter = frayteNo != null ?
                new ObjectParameter("FrayteNo", frayteNo) :
                new ObjectParameter("FrayteNo", typeof(string));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var specialSerchIdParameter = specialSerchId.HasValue ?
                new ObjectParameter("SpecialSerchId", specialSerchId) :
                new ObjectParameter("SpecialSerchId", typeof(int));
    
            var airlineIdParameter = airlineId != null ?
                new ObjectParameter("AirlineId", airlineId) :
                new ObjectParameter("AirlineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_TradelaneTrackAndTraceDetail_Result>("spGet_TradelaneTrackAndTraceDetail", mawbParameter, fromDateParameter, toDateParameter, shipmentStatusIdParameter, frayteNoParameter, skipRowsParameter, takeRowsParameter, customerIdParameter, userIdParameter, operationZoneIdParameter, roleIdParameter, specialSerchIdParameter, airlineIdParameter);
        }
    
        public virtual ObjectResult<spGet_DirectBookingManifestDetail_Result> spGet_DirectBookingManifestDetail(Nullable<int> manifestId, string moduleType, Nullable<int> roleId)
        {
            var manifestIdParameter = manifestId.HasValue ?
                new ObjectParameter("ManifestId", manifestId) :
                new ObjectParameter("ManifestId", typeof(int));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_DirectBookingManifestDetail_Result>("spGet_DirectBookingManifestDetail", manifestIdParameter, moduleTypeParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<spGet_LogisticWeightLimit_Result> spGet_LogisticWeightLimit(Nullable<int> userId, Nullable<int> operationZoneId, Nullable<decimal> weight, string logisticType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var logisticTypeParameter = logisticType != null ?
                new ObjectParameter("LogisticType", logisticType) :
                new ObjectParameter("LogisticType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_LogisticWeightLimit_Result>("spGet_LogisticWeightLimit", userIdParameter, operationZoneIdParameter, weightParameter, logisticTypeParameter);
        }
    
        public virtual ObjectResult<spGet_ExpressTrackAndTraceDetail_Result> spGet_ExpressTrackAndTraceDetail(string mawb, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string awbNo, string trackingNo, Nullable<int> shipmentStatusId, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> customerId, Nullable<int> userId, Nullable<int> operationZoneId, Nullable<int> roleId, Nullable<int> specialSerchId, string airlineId)
        {
            var mawbParameter = mawb != null ?
                new ObjectParameter("Mawb", mawb) :
                new ObjectParameter("Mawb", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var awbNoParameter = awbNo != null ?
                new ObjectParameter("AwbNo", awbNo) :
                new ObjectParameter("AwbNo", typeof(string));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var specialSerchIdParameter = specialSerchId.HasValue ?
                new ObjectParameter("SpecialSerchId", specialSerchId) :
                new ObjectParameter("SpecialSerchId", typeof(int));
    
            var airlineIdParameter = airlineId != null ?
                new ObjectParameter("AirlineId", airlineId) :
                new ObjectParameter("AirlineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ExpressTrackAndTraceDetail_Result>("spGet_ExpressTrackAndTraceDetail", mawbParameter, fromDateParameter, toDateParameter, awbNoParameter, trackingNoParameter, shipmentStatusIdParameter, skipRowsParameter, takeRowsParameter, customerIdParameter, userIdParameter, operationZoneIdParameter, roleIdParameter, specialSerchIdParameter, airlineIdParameter);
        }
    
        public virtual ObjectResult<spGet_GetExpressManifestedShipments_Result> spGet_GetExpressManifestedShipments(Nullable<int> manifestId)
        {
            var manifestIdParameter = manifestId.HasValue ?
                new ObjectParameter("ManifestId", manifestId) :
                new ObjectParameter("ManifestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_GetExpressManifestedShipments_Result>("spGet_GetExpressManifestedShipments", manifestIdParameter);
        }
    
        public virtual ObjectResult<spGet_TrackAndTraceDetail_Result> spGet_TrackAndTraceDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> shipmentStatusId, string frayteNo, string trackingNo, string logisticType, Nullable<int> customerId, string logisticServiceType, Nullable<int> userId, Nullable<int> operationZoneId, string moduleType)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var frayteNoParameter = frayteNo != null ?
                new ObjectParameter("FrayteNo", frayteNo) :
                new ObjectParameter("FrayteNo", typeof(string));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var logisticTypeParameter = logisticType != null ?
                new ObjectParameter("LogisticType", logisticType) :
                new ObjectParameter("LogisticType", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var logisticServiceTypeParameter = logisticServiceType != null ?
                new ObjectParameter("LogisticServiceType", logisticServiceType) :
                new ObjectParameter("LogisticServiceType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_TrackAndTraceDetail_Result>("spGet_TrackAndTraceDetail", fromDateParameter, toDateParameter, shipmentStatusIdParameter, frayteNoParameter, trackingNoParameter, logisticTypeParameter, customerIdParameter, logisticServiceTypeParameter, userIdParameter, operationZoneIdParameter, moduleTypeParameter);
        }
    
        public virtual ObjectResult<spGet_ExpressTrackManifest_Result> spGet_ExpressTrackManifest(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<int> userId, Nullable<int> createdBy, string manifestName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var manifestNameParameter = manifestName != null ?
                new ObjectParameter("ManifestName", manifestName) :
                new ObjectParameter("ManifestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ExpressTrackManifest_Result>("spGet_ExpressTrackManifest", fromDateParameter, toDateParameter, skipRowsParameter, takeRowsParameter, userIdParameter, createdByParameter, manifestNameParameter);
        }
    
        public virtual int spGet_DirectBookingServices(string logisticType, Nullable<decimal> weight, Nullable<int> operationZoneId, Nullable<int> fromCountryId, Nullable<int> toCountryId, string fromPostcode, string toPostcode, string packageType, string docType, Nullable<int> userId, Nullable<System.DateTime> date, string addressType, string packageCalculationType)
        {
            var logisticTypeParameter = logisticType != null ?
                new ObjectParameter("LogisticType", logisticType) :
                new ObjectParameter("LogisticType", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var fromCountryIdParameter = fromCountryId.HasValue ?
                new ObjectParameter("FromCountryId", fromCountryId) :
                new ObjectParameter("FromCountryId", typeof(int));
    
            var toCountryIdParameter = toCountryId.HasValue ?
                new ObjectParameter("ToCountryId", toCountryId) :
                new ObjectParameter("ToCountryId", typeof(int));
    
            var fromPostcodeParameter = fromPostcode != null ?
                new ObjectParameter("FromPostcode", fromPostcode) :
                new ObjectParameter("FromPostcode", typeof(string));
    
            var toPostcodeParameter = toPostcode != null ?
                new ObjectParameter("ToPostcode", toPostcode) :
                new ObjectParameter("ToPostcode", typeof(string));
    
            var packageTypeParameter = packageType != null ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(string));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var packageCalculationTypeParameter = packageCalculationType != null ?
                new ObjectParameter("PackageCalculationType", packageCalculationType) :
                new ObjectParameter("PackageCalculationType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGet_DirectBookingServices", logisticTypeParameter, weightParameter, operationZoneIdParameter, fromCountryIdParameter, toCountryIdParameter, fromPostcodeParameter, toPostcodeParameter, packageTypeParameter, docTypeParameter, userIdParameter, dateParameter, addressTypeParameter, packageCalculationTypeParameter);
        }
    
        public virtual ObjectResult<spGet_GetExpressBags_Result> spGet_GetExpressBags(Nullable<int> hubId, Nullable<int> userId)
        {
            var hubIdParameter = hubId.HasValue ?
                new ObjectParameter("HubId", hubId) :
                new ObjectParameter("HubId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_GetExpressBags_Result>("spGet_GetExpressBags", hubIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGet_ExpressManifests_Result> spGet_ExpressManifests(string mawb, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string awbNo, string trackingNo, Nullable<int> shipmentStatusId, Nullable<int> customerId, Nullable<int> userId, Nullable<int> operationZoneId, Nullable<int> roleId)
        {
            var mawbParameter = mawb != null ?
                new ObjectParameter("Mawb", mawb) :
                new ObjectParameter("Mawb", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var awbNoParameter = awbNo != null ?
                new ObjectParameter("AwbNo", awbNo) :
                new ObjectParameter("AwbNo", typeof(string));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_ExpressManifests_Result>("spGet_ExpressManifests", mawbParameter, fromDateParameter, toDateParameter, awbNoParameter, trackingNoParameter, shipmentStatusIdParameter, customerIdParameter, userIdParameter, operationZoneIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<spGet_BKKJobViewPurchaseOrder_Result> spGet_BKKJobViewPurchaseOrder(Nullable<int> pONo, Nullable<int> jobNo, Nullable<int> styleNo, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<System.DateTime> fromDate, Nullable<int> customerId, string mAWB, Nullable<int> operationZoneId, Nullable<int> shipmentStatusId, string trackingNo, string customField, string frayteNumber)
        {
            var pONoParameter = pONo.HasValue ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(int));
    
            var jobNoParameter = jobNo.HasValue ?
                new ObjectParameter("JobNo", jobNo) :
                new ObjectParameter("JobNo", typeof(int));
    
            var styleNoParameter = styleNo.HasValue ?
                new ObjectParameter("StyleNo", styleNo) :
                new ObjectParameter("StyleNo", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var mAWBParameter = mAWB != null ?
                new ObjectParameter("MAWB", mAWB) :
                new ObjectParameter("MAWB", typeof(string));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var customFieldParameter = customField != null ?
                new ObjectParameter("CustomField", customField) :
                new ObjectParameter("CustomField", typeof(string));
    
            var frayteNumberParameter = frayteNumber != null ?
                new ObjectParameter("FrayteNumber", frayteNumber) :
                new ObjectParameter("FrayteNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_BKKJobViewPurchaseOrder_Result>("spGet_BKKJobViewPurchaseOrder", pONoParameter, jobNoParameter, styleNoParameter, toDateParameter, skipRowsParameter, takeRowsParameter, fromDateParameter, customerIdParameter, mAWBParameter, operationZoneIdParameter, shipmentStatusIdParameter, trackingNoParameter, customFieldParameter, frayteNumberParameter);
        }
    
        public virtual ObjectResult<spGet_BKKPoViewPurchaseOrder_Result> spGet_BKKPoViewPurchaseOrder(Nullable<int> pONo, Nullable<int> jobNo, Nullable<int> styleNo, Nullable<System.DateTime> toDate, Nullable<int> skipRows, Nullable<int> takeRows, Nullable<System.DateTime> fromDate, Nullable<int> customerId, string mAWB, Nullable<int> operationZoneId, Nullable<int> shipmentStatusId, string trackingNo, string customField, string frayteNumber)
        {
            var pONoParameter = pONo.HasValue ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(int));
    
            var jobNoParameter = jobNo.HasValue ?
                new ObjectParameter("JobNo", jobNo) :
                new ObjectParameter("JobNo", typeof(int));
    
            var styleNoParameter = styleNo.HasValue ?
                new ObjectParameter("StyleNo", styleNo) :
                new ObjectParameter("StyleNo", typeof(int));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var skipRowsParameter = skipRows.HasValue ?
                new ObjectParameter("SkipRows", skipRows) :
                new ObjectParameter("SkipRows", typeof(int));
    
            var takeRowsParameter = takeRows.HasValue ?
                new ObjectParameter("TakeRows", takeRows) :
                new ObjectParameter("TakeRows", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var mAWBParameter = mAWB != null ?
                new ObjectParameter("MAWB", mAWB) :
                new ObjectParameter("MAWB", typeof(string));
    
            var operationZoneIdParameter = operationZoneId.HasValue ?
                new ObjectParameter("OperationZoneId", operationZoneId) :
                new ObjectParameter("OperationZoneId", typeof(int));
    
            var shipmentStatusIdParameter = shipmentStatusId.HasValue ?
                new ObjectParameter("ShipmentStatusId", shipmentStatusId) :
                new ObjectParameter("ShipmentStatusId", typeof(int));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var customFieldParameter = customField != null ?
                new ObjectParameter("CustomField", customField) :
                new ObjectParameter("CustomField", typeof(string));
    
            var frayteNumberParameter = frayteNumber != null ?
                new ObjectParameter("FrayteNumber", frayteNumber) :
                new ObjectParameter("FrayteNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGet_BKKPoViewPurchaseOrder_Result>("spGet_BKKPoViewPurchaseOrder", pONoParameter, jobNoParameter, styleNoParameter, toDateParameter, skipRowsParameter, takeRowsParameter, fromDateParameter, customerIdParameter, mAWBParameter, operationZoneIdParameter, shipmentStatusIdParameter, trackingNoParameter, customFieldParameter, frayteNumberParameter);
        }
    }
}
